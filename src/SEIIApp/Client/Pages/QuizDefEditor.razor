@page "/quizdefedit/{QuizId:int}"

@using SEIIApp.Shared
@using SEIIApp.Client.Components

@inject NavigationManager NavManager
@inject Services.QuizBackendAccessService QuizService

<h3>Quiz Definitions Editor</h3>

@if (QuizDto != null) {

<EditForm EditContext="@context" OnSubmit="OnSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <label>Quiz Name</label>
    <InputText @bind-Value="QuizDto.Name" />

    @foreach (var question in QuizDto.Questions)
    {
        <div class="card">
            <div class="card-body">
                <!-- Component for questions in quiz -->
                <QuestionDefComponent QuestionDto="question"></QuestionDefComponent>
                <button class="btn btn-light btn-sm" @onclick="() => RemoveQuestion(question)">Remove Question</button>
            </div>
        </div>
    }

    <ValidationSummary />

    <button class="btn btn-light btn-sm" @onclick="AddQuestion">Add Question</button>
    <button class="btn btn-light" @onclick="SaveQuizToBackend">Save Complete Quiz</button>

</EditForm>

    }
else {
    <h5>Quiz definition in loading (or not found) ...</h5>
}

@code { 


    [Parameter]
    public int QuizId { get; set; }

    public QuizDto QuizDto { get; set; }

    private EditContext context { get; set; }

    protected override async Task OnParametersSetAsync() {
        if (QuizId != 0) {
            var existingQuiz = await QuizService.GetQuizById(QuizId);
            PrepareEditOrAddOfQuiz(existingQuiz);
        }
        else {
            PrepareEditOrAddOfQuiz(new QuizDto());
        }
        await base.OnParametersSetAsync();

        context = new EditContext(QuizDto);
    }

    private void PrepareEditOrAddOfQuiz(QuizDto q) {
        if (q.Questions == null) q.Questions = Array.Empty<QuestionDto>();
        this.QuizDto = q;
    }

    private void AddQuestion() {
        //Add element to question definition array
        QuizDto.Questions = QuizDto.Questions.Concat(new QuestionDto[] {
            new QuestionDto()
        }).ToArray();
    }

    private void RemoveQuestion(QuestionDto question) {
        QuizDto.Questions = QuizDto.Questions.Where(q => q != question).ToArray();
    }

    private void OnSubmit(EditContext context) {

    }

    private async void SaveQuizToBackend() {
        var isValid = context.Validate();
        if (isValid) {
            var answer = await QuizService.AddOrUpdateQuiz(QuizDto);
            if (answer != null) {
                this.QuizDto.Id = answer.Id; //refresh id (if created)
            }
            NavManager.NavigateTo("/quizdef");
        }
    }

}
