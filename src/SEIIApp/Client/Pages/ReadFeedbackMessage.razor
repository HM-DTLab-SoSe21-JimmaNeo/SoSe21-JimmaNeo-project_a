@page "/readfeedback/{Id:int}"

@inject Services.FeedbackBackendAccessService FeedbackService
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

@if (feedback != null)
{
    @if (feedback.CourseName != null)
    {
        <h3>
            feedback zum Kurs: @feedback.CourseName
        </h3>
    }
    else
    {
        <h3>Allgemeines Feedback</h3>
    }
    <div style="font-size: 16px">&nbsp;</div>
    <h5>Betreff: @feedback.Category</h5>
    <div style="font-size: 8px">&nbsp;</div>
    <small>Nachricht von @feedback.Name</small>
    <div class="jumbotron border bg-white" style="box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); padding-top: 1rem; padding-bottom: 1rem">
        <p>@((MarkupString) message)</p>
    </div>
    <div style="font-size: 16px">&nbsp;</div>
    <small>
        <i>Antwort per Email an:</i>

    </small>
    <br />
    <span style="padding-right: 12px">@feedback.Email</span>
    <CopyToClipboard Text="@feedback.Email" />

    <div style="font-size: 16px">&nbsp;</div>


    <div style="text-align:right"> <button class="btn btn-outline-danger" @onclick="DeleteFeedback" style="text-align:right; padding-right: 16px;">Feedback löschen</button></div>


}
@code {

    [Parameter]
    public int Id { get; set; }

    public FeedbackDto feedback { get; set; }
    public string message { get; set; }

    protected async Task DeleteFeedback()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Feedback wird gelöscht!");
        if (confirmed)
        {
            await FeedbackService.DeleteFeedback(Id);
            NavManager.NavigateTo("/readfeedback/", true);

        }

    }

    protected override async Task OnParametersSetAsync()
    {

        await base.OnParametersSetAsync();
        feedback = await FeedbackService.GetFeedbackById(Id);
        message = feedback.Message.Replace("\n", "<br />");
    }
}
