@page "/feedback"
@page "/feedback/{CourseId:int}"

@using SEIIApp.Shared

@inject NavigationManager navManager
@inject Services.CourseBackendAccessService CourseService
@inject IJSRuntime JsRuntime

<div class="row justify-content-md-center">

    @if (CourseId == null)
    {
        <div class="col-sm-12">
            <h1 style="font-size: 2.5em; font-family: 'Ubuntu', sans-serif; font-weight:lighter; padding-top:0.75%; padding-bottom:2%">Feedback: Allgemein</h1>
        </div>
        <div class="col-sm-3">

            <label for="flexRadioDefault1">Kategorie?</label>
            <div class="form-check">
                <input class="form-check-input align-middle" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                <label class="form-check-label" for="flexRadioDefault1">
                    Weitere Kursinhalte erwünscht
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input align-middle" type="radio" name="flexRadioDefault" id="flexRadioDefault2">
                <label class="form-check-label" for="flexRadioDefault2">
                    Weitere Funktionen erwünscht
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input align-middle" type="radio" name="flexRadioDefault" id="flexRadioDefault3">
                <label class="form-check-label" for="flexRadioDefault3">
                    Ich habe einen Fehler entdeckt
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input align-middle" type="radio" name="flexRadioDefault" id="flexRadioDefault4">
                <label class="form-check-label" for="flexRadioDefault4">
                    Andere Kategorie
                </label>
            </div>


        </div>

    }
    else if (Course != null)
    {
        <div class="col-sm-12">
            <h1 style="font-size: 2.5em; font-family: 'Ubuntu', sans-serif; font-weight:lighter; padding-top:0.75%; padding-bottom:2%">Feedback: Kurs "@Course.Name"</h1>
        </div>
        <div class="col-sm-3">

            <label for="flexRadioDefault1">Kategorie?</label>
            <div class="form-check align-middle">
                <input class="form-check-input align-middle" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                <label class="form-check-label" for="flexRadioDefault1">
                    Uns fehlt die Ausstattung
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input align-middle" type="radio" name="flexRadioDefault" id="flexRadioDefault2">
                <label class="form-check-label" for="flexRadioDefault2">
                    Bei uns wir es anders gemacht
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input align-middle" type="radio" name="flexRadioDefault" id="flexRadioDefault3">
                <label class="form-check-label" for="flexRadioDefault3">
                    Auf einzelne Lerninhalte wurde nicht ausreichend eingegangen
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input align-middle" type="radio" name="flexRadioDefault" id="flexRadioDefault4">
                <label class="form-check-label" for="flexRadioDefault4">
                    Andere Kategorie
                </label>
            </div>
        </div>
    }

    <div class="col-sm-9">
        <div class="jumbotron border bg-light-grey" style="box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); overflow: hidden; padding-top: 1rem; padding-bottom: 1rem">


            <div style="padding:20px;">
                <EditForm EditContext="@context">
                    <DataAnnotationsValidator /><ValidationSummary />
                    <label for="name">Name: </label>
                    <InputText id="name" placeholder="Name eingeben" @bind-Value="message.ContactInfo.Name" />&nbsp;&nbsp;&nbsp;
                    <label for="email">Email: </label>
                    <InputText id="email" placeholder="Email eingeben" @bind-Value="message.ContactInfo.Email" />
                    <ValidationMessage For="@(()=> message.ContactInfo.Email)"></ValidationMessage>

                    <div style="font-size:12px">&nbsp;</div>
                    <div class="form-group">
                        <label for="Textarea">Beschreibe dein Problem</label>
                        <div style="font-size:12px">&nbsp;</div>
                        <InputTextArea id="Textarea" @bind-Value="message.Message" style="width:100%"></InputTextArea>
                    </div>
                </EditForm>
                <label for="inputGroupFile02">Datei hinzuf&uuml;gen?</label>
                <div class="input-group mb-3">

                    <input type="file" class="form-control" id="inputGroupFile02">
                    <label class="input-group-text" for="inputGroupiFle02">Upload</label>
                </div>
            </div>

        </div>
        <div style="font-size:8px">&nbsp;</div>
        <button style="float:right;" type="button" class="btn btn-outline-danger btn-lg" @onclick="sendFeedback">Senden</button>
    </div>


</div>


@code {
    [Parameter]
    public int? CourseId { get; set; }


    public FeedbackDto message = new FeedbackDto()
    {
        ContactInfo = new ContactInformationDto()
    };

private EditContext context { get; set; }

    async Task sendFeedback()
    {
        if (context.Validate())
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            if (confirmed)
            {
                //TODO: Email verschicken
                navManager.NavigateTo(CourseId != null ? "/Course/" + CourseId : "/");

            }
        }
    }

    private void OnSubmit(EditContext context)
    {
    }

    private CourseDto Course;

    protected override async Task OnParametersSetAsync()
    {
        if (CourseId != null)
        {
            Course = await CourseService.GetCourseById((int)CourseId);

        }

        context = new EditContext(message);
    }
}
