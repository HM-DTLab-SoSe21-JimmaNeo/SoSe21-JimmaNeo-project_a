@using System.Threading
@using SEIIApp.Shared
@using SEIIApp.Client.Pages 


@{
    if (QuestionDto != null)
    {
        <EditForm Model="QuestionDto">
            <DataAnnotationsValidator />

            <InputText placeholder="Frage eingeben" @bind-Value="QuestionDto.QuestionText" />
            <ValidationSummary />

        </EditForm>
        @foreach (var a in QuestionDto.Answers)
        {
            <br />
            <button class="btn btn-light btn-sm" @onclick="() => RemoveAnswer(a)">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                </svg>
            </button>
            <CascadingValue Value=@this>
                <AnswerDefComponent AnswerDto="a"></AnswerDefComponent>
            </CascadingValue>

        }
        <br />
        <span>&nbsp;</span>
        <button class="btn btn-outline-secondary btn-block" @onclick="AddAnswer" style="padding: 8px; max-width: 78%; max-height: 30px;">+</button>

    }
    else
    {
        <label>Loading Question Definition ...</label>
    }
}

@code {

        [Parameter]
        public QuestionDto QuestionDto { get; set; }


        [CascadingParameter]
        public QuizDefEditor ParentComponent { get; set; }

    private List<AnswerDefComponent> AnswerComponents = new List<AnswerDefComponent>();

    public void AddChild(AnswerDefComponent component)
    {
        AnswerComponents.Add(component);
    }

    public void refresh(Object timer)
    {
        if (timer != null)
        {
            Timer t = (Timer)timer;
            t.Dispose();
        }
        foreach (AnswerDefComponent component in AnswerComponents)
        {

            component.refresh();
            StateHasChanged();
        }
    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        InitiQuestionDefintionDto();
    }

    private void InitiQuestionDefintionDto()
    {
        if (QuestionDto.Answers == null)
            QuestionDto.Answers = Array.Empty<AnswerDto>
    ();

    }

    private void AddAnswer()
    {
        QuestionDto.Answers = QuestionDto.Answers.Concat(new AnswerDto[] {
    new AnswerDto()
    }).ToArray();
    }

    private void RemoveAnswer(AnswerDto answer)
    {
        QuestionDto.Answers = QuestionDto.Answers.Where(a => a != answer).ToArray();
        Timer timer = new Timer(new TimerCallback(refresh));
        timer.Change(1, 0);
    }

    protected override void OnInitialized()
    {

        if (ParentComponent == null)
            throw new Exception("Must be used within MyParentComponent");
        ParentComponent.AddChild(this);
    }

}
